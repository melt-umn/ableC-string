#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <setjmp.h>
#include <signal.h>

#ifndef _STRING_XH
#define _STRING_XH

struct __attribute__((refId("edu:umn:cs:melt:exts:ableC:string:string"))) _string_s {
  size_t length;
  const char *text;
};

static const size_t MAX_POINTER_STR_LEN = sizeof(void *) * 2 + 2;
static const size_t MAX_FLOAT_STR_LEN = 20;
static const size_t MAX_DOUBLE_STR_LEN = 24;
static const size_t MAX_LONG_DOUBLE_STR_LEN = 45;

#define MAX_INT_TYPE_STR_LEN(ty) ((CHAR_BIT * sizeof(ty) - 1) / 3 + 2)
static const size_t MAX_CHAR_STR_LEN = MAX_INT_TYPE_STR_LEN(char);
static const size_t MAX_SHORT_STR_LEN = MAX_INT_TYPE_STR_LEN(short);
static const size_t MAX_INT_STR_LEN = MAX_INT_TYPE_STR_LEN(int);
static const size_t MAX_LONG_STR_LEN = MAX_INT_TYPE_STR_LEN(long);
static const size_t MAX_LONG_LONG_STR_LEN = MAX_INT_TYPE_STR_LEN(long long);

static const string TRUE_STR = (string)(struct _string_s){4, "true"};
static const string FALSE_STR = (string)(struct _string_s){5, "false"};

// Functions prefixed with _ are considered internal to the implementation of the extension
// Other functions are in theory OK to call directly
static inline void _check_index_string(string s, size_t i) {
  if (i < 0 || i >= s.length) {
    fprintf(stderr, "String index out of bounds: length %lu, index %lu\n", s.length, i);
    abort();
  }
}

static inline char subscript_string(string s, size_t i) {
  _check_index_string(s, i);
  return s.text[i];
}

static inline _Bool equals_string(string s1, string s2) {
  return !strcmp(s1.text, s2.text);
}

static inline string concat_string(string s1, string s2) {
  char *result = GC_malloc(s1.length + s2.length + 1); // + 1 for NULL char
  strcpy(result, s1.text);
  strcat(result, s2.text);
  return (string)(struct _string_s){s1.length + s2.length, result};
}

static inline string repeat_string(string s, size_t num) {
  char *result = GC_malloc(s.length * num + 1);
  result[0] = '\0';
  size_t i;
  for (size_t i = 0; i < num; i++)
    strcat(result, s.text);
  return (string)(struct _string_s){s.length * num, result};
}

static inline string substring(string s, size_t start, size_t end) {
  if (start < 0 || start >= s.length || end < 0 || end >= s.length || start > end) {
    fprintf(stderr, "Substring index out of bounds: length %lu, start %lu, end %lu\n", s.length, start, end);
    abort();
  }
  char *result = GC_malloc(end - start + 1);
  strncpy(result, s.text + start, end - start);
  return (string)(struct _string_s){end - start, result};
}

static inline size_t show_char(char *buf, char c) {
  buf[0] = '\'';
  size_t bufIndex = 1;
  switch (c) {
    case '\a':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = 'a';
      break;
    case '\b':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = 'b';
      break;
    case '\n':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = 'n';
      break;
    case '\r':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = 'r';
      break;
    case '\t':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = 't';
      break;
    case '\v':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = 'v';
      break;
    case '\"':
    case '\'':
    case '\\':
  //case '\?':
      buf[bufIndex++] = '\\';
      buf[bufIndex++] = c;
      break;
    default:
      buf[bufIndex++] = c;
  }
  buf[bufIndex++] = '\'';
  buf[bufIndex] = '\0';

  return bufIndex;
}

static inline size_t show_string_max_len(string s) {
  return 2 * s.length + 3;  // Worst-case size, if all chars are escaped
}

static inline size_t show_string(char *buf, string s) {
  buf[0] = '\"';
  size_t bufIndex = 1;
  for (size_t i = 0; i < s.length; i++) {
    bufIndex += show_char(buf + bufIndex, s.text[i]);
  }
  buf[bufIndex++] = '\"';
  buf[bufIndex] = '\0';
  return bufIndex;
}

// Hacky way of testing if a pointer can be dereferenced validly
// TODO: This isn't remotely thread safe, but I don't know of a better way
static jmp_buf _jump;
static void _handle_sig(int sig) {
  longjmp(_jump, 1);
}

static struct sigaction _old_segv, _old_bus;
static inline void _set_handler() {
  struct sigaction sa;
  sa.sa_handler = _handle_sig;
  sigemptyset(&sa.sa_mask);
  if (sigaction(SIGSEGV, &sa, &_old_segv)) {
    perror("Couldn't set dereference SIGSEGV handler");
    abort();
  }
  if (sigaction(SIGBUS, &sa, &_old_bus)) {
    perror("Couldn't set dereference SIGBUS handler");
    abort();
  }
}
static inline void _clear_handler() {
  if (sigaction(SIGSEGV, &_old_segv, NULL)) {
    perror("Couldn't reset dereference SIGSEGV handler");
    abort();
  }
  if (sigaction(SIGBUS, &_old_bus, NULL)) {
    perror("Couldn't reset dereference SIGBUS handler");
    abort();
  }
}

static inline size_t show_char_pointer_max_len(char *s) {
  _Bool illegal = 0;

  // Hacky way of testing if a pointer can be dereferenced validly
  // TODO: This isn't remotely thread safe, but I don't know of a better way
  if (s) {
    _set_handler();
    if (!setjmp(_jump)) {
      volatile char val = *s;
    } else {
      illegal = 1;
    }
    _clear_handler();
  } else {
    illegal = 1;
  }
  
  if (illegal) {
    return 35;
  } else {
    return 2 * strlen(s) + 1;
  }
}

static inline size_t show_char_pointer(char *buf, char *s) {
  _Bool illegal = 0;

  // Hacky way of testing if a pointer can be dereferenced validly
  // TODO: This isn't remotely thread safe, but I don't know of a better way
  if (s) {
    _set_handler();
    if (!setjmp(_jump)) {
      volatile char val = *s;
    } else {
      illegal = 1;
    }
    _clear_handler();
  } else {
    illegal = 1;
  }
  
  if (illegal) {
    sprintf(buf, "<char * at 0x%lx>", (unsigned long)s);
    return strlen(buf);
  } else {
    return show_string((string)(struct _string_s){strlen(s), s});
  }
}

#endif
